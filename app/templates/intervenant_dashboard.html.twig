<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Tableau de Bord Intervenant - AccordEnergie</title>
    <link rel="stylesheet"  href="/css/adminnn_css">
      <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

</head>
<body>
 <div id="large-header" class="large-header">
  <canvas id="demo-canvas"></canvas>
  <h1 class="main-title">Accord<span class="thin">Énergie</span></h1>
</div>
    <h1>Tableau de Bord Intervenant</h1>
     <div class="navigation">
      <button id="btnGestionInterventions">Gestion des Interventions</button>
    
    </div>
    <section id="gestionInterventions">
        <h2>Interventions Assignées</h2>
        <table border="1">
            <thead>
                <tr>
                    <th>Titre</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Urgence</th>
                    <th>Date Planifiée</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for intervention in interventions %}
                <tr>
                    <td>{{ intervention.title }}</td>
                    <td>{{ intervention.description }}</td>
                    <td>{{ intervention.status }}</td>
                    <td>{{ intervention.urgency_level }}</td>
                    <td>{{ intervention.date_planned }}</td>
                    <td>
                   <form action="index.php" method="get">
    <input type="hidden" name="action" value="editStatusIntervention">
    <input type="hidden" name="intervention_id" value="{{ intervention.intervention_id }}">

    <label for="new_status_id">Nouveau Statut :</label>
    <select name="new_status_id" id="new_status_id" required>
        <option value="">Sélectionnez un statut</option>
        {% for status in statuses %}
            <option value="{{ status.ids }}">{{ status.status }}</option>
        {% endfor %}
    </select>
<br>
    <button type="submit">Modifier le statut</button>
</form>
 

        <form action="index.php" method="POST">
            <input type="hidden" name="action" value="deleteIntervention">
            <input type="hidden" name="intervention_id" value="{{ intervention.intervention_id }}">
            <button type="submit">Delete</button>
        </form>
        <!-- Dans votre boucle for pour chaque intervention -->
<a href="javascript:void(0)" onclick="addComment({{ intervention.intervention_id }})">Commenter</a>
<a href="javascript:void(0)" onclick="showComments({{ intervention.intervention_id }})">Afficher les commentaires</a>

                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </section>

    <div id="update-section" style="display:none;">
        <!-- Content for update section -->
    </div>

      <script>
        document.addEventListener("DOMContentLoaded", function() {
            var btnGestionInterventions = document.getElementById('btnGestionInterventions');
         
            var sectionGestionInterventions = document.getElementById('gestionInterventions');
           

            btnGestionInterventions.addEventListener('click', function() {
                sectionGestionInterventions.style.display = 'block';
                sectionGestionStatus.style.display = 'none';
            });

            btnGestionStatus.addEventListener('click', function() {
                sectionGestionInterventions.style.display = 'none';
           
            });
        });
        function addComment(interventionId) {
    var commentContent = prompt("Entrez votre commentaire :");
    if (commentContent) {
        fetch('index.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', },
            body: `action=postComment&intervention_id=${interventionId}&content=${encodeURIComponent(commentContent)}`
        })
        .then(response => response.json()) // Expect a JSON response
        .then(data => {
            console.log(data); // Ajoutez cette ligne pour voir la réponse dans la console du navigateur
            if(data.success) {
                alert("Commentaire ajouté avec succès");
                showComments(interventionId);
            } else {
                alert("Erreur lors de l'ajout du commentaire");
            }
        })
        .catch(error => console.error('Erreur:', error));
    }
}


function showComments(interventionId) {
    fetch(`index.php?action=getComments&interventionId=${interventionId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('La requête a échoué : ' + response.status);
            }
            return response.json();
        })
        .then(comments => {
            console.log('Réponse JSON des commentaires:', comments);
            alert(JSON.stringify(comments)); // Exemple simple pour afficher les commentaires
            // Ici, vous pouvez mettre à jour le DOM pour afficher les commentaires
        })
        .catch(error => console.error('Erreur:', error));
}
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('th').forEach(headerCell => {
        headerCell.addEventListener('click', () => {
            const tableElement = headerCell.parentElement.parentElement.parentElement;
            const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
            const isAscending = headerCell.classList.contains('asc');
            const directionModifier = isAscending ? 1 : -1;
            headerCell.classList.toggle('asc', !isAscending);
            headerCell.classList.toggle('desc', isAscending);
            const rows = Array.from(tableElement.querySelectorAll('tbody > tr'));
            rows.sort((a, b) => {
                const aText = a.children[headerIndex].textContent.trim();
                const bText = b.children[headerIndex].textContent.trim();
                return aText.localeCompare(bText) * directionModifier;
            });
            while (tableElement.querySelector('tbody').firstChild) {
                tableElement.querySelector('tbody').removeChild(tableElement.querySelector('tbody').firstChild);
            }
            tableElement.querySelector('tbody').append(...rows);
        });
    });
});
(function() {

    var width, height, largeHeader, canvas, ctx, points, target, animateHeader = true;

    // Main
    initHeader();
    initAnimation();
    addListeners();

    function initHeader() {
        width = window.innerWidth;
        height = window.innerHeight;
        target = {x: width/2, y: height/2};

        largeHeader = document.getElementById('large-header');
        largeHeader.style.height = height+'px';

        canvas = document.getElementById('demo-canvas');
        canvas.width = width;
        canvas.height = height;
        ctx = canvas.getContext('2d');

        // create points
        points = [];
        for(var x = 0; x < width; x = x + width/20) {
            for(var y = 0; y < height; y = y + height/20) {
                var px = x + Math.random()*width/20;
                var py = y + Math.random()*height/20;
                var p = {x: px, originX: px, y: py, originY: py };
                points.push(p);
            }
        }

        // for each point find the 5 closest points
        for(var i = 0; i < points.length; i++) {
            var closest = [];
            var p1 = points[i];
            for(var j = 0; j < points.length; j++) {
                var p2 = points[j]
                if(!(p1 == p2)) {
                    var placed = false;
                    for(var k = 0; k < 5; k++) {
                        if(!placed) {
                            if(closest[k] == undefined) {
                                closest[k] = p2;
                                placed = true;
                            }
                        }
                    }

                    for(var k = 0; k < 5; k++) {
                        if(!placed) {
                            if(getDistance(p1, p2) < getDistance(p1, closest[k])) {
                                closest[k] = p2;
                                placed = true;
                            }
                        }
                    }
                }
            }
            p1.closest = closest;
        }

        // assign a circle to each point
        for(var i in points) {
            var c = new Circle(points[i], 2+Math.random()*2, 'rgba(255,255,255,0.3)');
            points[i].circle = c;
        }
    }

    // Event handling
    function addListeners() {
        if(!('ontouchstart' in window)) {
            window.addEventListener('mousemove', mouseMove);
        }
        window.addEventListener('scroll', scrollCheck);
        window.addEventListener('resize', resize);
    }

    function mouseMove(e) {
        var posx = posy = 0;
        if (e.pageX || e.pageY) {
            posx = e.pageX;
            posy = e.pageY;
        }
        else if (e.clientX || e.clientY)    {
            posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        target.x = posx;
        target.y = posy;
    }

    function scrollCheck() {
        if(document.body.scrollTop > height) animateHeader = false;
        else animateHeader = true;
    }

    function resize() {
        width = window.innerWidth;
        height = window.innerHeight;
        largeHeader.style.height = height+'px';
        canvas.width = width;
        canvas.height = height;
    }

    // animation
    function initAnimation() {
        animate();
        for(var i in points) {
            shiftPoint(points[i]);
        }
    }

    function animate() {
        if(animateHeader) {
            ctx.clearRect(0,0,width,height);
            for(var i in points) {
                // detect points in range
                if(Math.abs(getDistance(target, points[i])) < 4000) {
                    points[i].active = 0.3;
                    points[i].circle.active = 0.6;
                } else if(Math.abs(getDistance(target, points[i])) < 20000) {
                    points[i].active = 0.1;
                    points[i].circle.active = 0.3;
                } else if(Math.abs(getDistance(target, points[i])) < 40000) {
                    points[i].active = 0.02;
                    points[i].circle.active = 0.1;
                } else {
                    points[i].active = 0;
                    points[i].circle.active = 0;
                }

                drawLines(points[i]);
                points[i].circle.draw();
            }
        }
        requestAnimationFrame(animate);
    }

    function shiftPoint(p) {
        TweenLite.to(p, 1+1*Math.random(), {x:p.originX-50+Math.random()*100,
            y: p.originY-50+Math.random()*100, ease:Circ.easeInOut,
            onComplete: function() {
                shiftPoint(p);
            }});
    }

    // Canvas manipulation
    function drawLines(p) {
        if(!p.active) return;
        for(var i in p.closest) {
            ctx.beginPath();
            ctx.moveTo(p.x, p.y);
            ctx.lineTo(p.closest[i].x, p.closest[i].y);
            ctx.strokeStyle = 'rgba(156,217,249,'+ p.active+')';
            ctx.stroke();
        }
    }

    function Circle(pos,rad,color) {
        var _this = this;

        // constructor
        (function() {
            _this.pos = pos || null;
            _this.radius = rad || null;
            _this.color = color || null;
        })();

        this.draw = function() {
            if(!_this.active) return;
            ctx.beginPath();
            ctx.arc(_this.pos.x, _this.pos.y, _this.radius, 0, 2 * Math.PI, false);
            ctx.fillStyle = 'rgba(156,217,249,'+ _this.active+')';
            ctx.fill();
        };
    }

    // Util
    function getDistance(p1, p2) {
        return Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2);
    }
    
})();
    </script>
  <div class="logout-button">
    <form action="index.php" method="GET">
        <input type="hidden" name="action" value="logout">
        <button type="submit"><i class="fas fa-power-off"></i> Déconnexion</button>
    </form>
</div>

</body>
</html>
